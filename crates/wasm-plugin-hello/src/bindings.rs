// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_hello_world_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::hello_world();
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_hello_world<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_add_cabi<T: Guest>(arg0: i32, arg1: i32) -> i32 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::add(arg0 as u32, arg1 as u32);
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_sum_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> i32 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let len0 = arg1;
    let result1 = T::sum(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0));
    _rt::as_i32(result1)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_loop_sum_cabi<T: Guest>(arg0: i32) -> i32 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::loop_sum(arg0 as u32);
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_generate_string_cabi<T: Guest>(arg0: i32) -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::generate_string(arg0 as u32);
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_generate_string<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
    fn hello_world() -> _rt::String;
    fn add(a: u32, b: u32) -> u32;
    fn sum(l: _rt::Vec<u32>) -> u32;
    fn loop_sum(n: u32) -> u32;
    fn generate_string(n: u32) -> _rt::String;
}
#[doc(hidden)]
macro_rules! __export_world_example_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "hello-world")] unsafe extern "C" fn
        export_hello_world() -> * mut u8 { unsafe { $($path_to_types)*::
        _export_hello_world_cabi::<$ty > () } } #[unsafe (export_name =
        "cabi_post_hello-world")] unsafe extern "C" fn _post_return_hello_world(arg0 : *
        mut u8,) { unsafe { $($path_to_types)*:: __post_return_hello_world::<$ty > (arg0)
        } } #[unsafe (export_name = "add")] unsafe extern "C" fn export_add(arg0 : i32,
        arg1 : i32,) -> i32 { unsafe { $($path_to_types)*:: _export_add_cabi::<$ty >
        (arg0, arg1) } } #[unsafe (export_name = "sum")] unsafe extern "C" fn
        export_sum(arg0 : * mut u8, arg1 : usize,) -> i32 { unsafe { $($path_to_types)*::
        _export_sum_cabi::<$ty > (arg0, arg1) } } #[unsafe (export_name = "loop-sum")]
        unsafe extern "C" fn export_loop_sum(arg0 : i32,) -> i32 { unsafe {
        $($path_to_types)*:: _export_loop_sum_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "generate-string")] unsafe extern "C" fn
        export_generate_string(arg0 : i32,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_generate_string_cabi::<$ty > (arg0) } } #[unsafe (export_name =
        "cabi_post_generate-string")] unsafe extern "C" fn
        _post_return_generate_string(arg0 : * mut u8,) { unsafe { $($path_to_types)*::
        __post_return_generate_string::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_example_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 2 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea =
    _RetArea([::core::mem::MaybeUninit::uninit(); 2 * ::core::mem::size_of::<*const u8>()]);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod wasm_plugin_hello {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Pos2 {
                    pub x: f32,
                    pub y: f32,
                }
                impl ::core::fmt::Debug for Pos2 {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Pos2")
                            .field("x", &self.x)
                            .field("y", &self.y)
                            .finish()
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Setter {
                    handle: _rt::Resource<Setter>,
                }
                type _SetterRep<T> = Option<T>;
                impl Setter {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Setter`.
                    pub fn new<T: GuestSetter>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _SetterRep<T> = Some(val);
                        let ptr: *mut _SetterRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestSetter>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestSetter>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestSetter>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _SetterRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestSetter>(&self) -> *mut _SetterRep<T> {
                        Setter::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Setter`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct SetterBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Setter>,
                }
                impl<'a> SetterBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestSetter>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _SetterRep<T> {
                        Setter::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Setter {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/types"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]setter"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Summer {
                    handle: _rt::Resource<Summer>,
                }
                type _SummerRep<T> = Option<T>;
                impl Summer {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Summer`.
                    pub fn new<T: GuestSummer>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _SummerRep<T> = Some(val);
                        let ptr: *mut _SummerRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestSummer>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestSummer>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestSummer>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _SummerRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestSummer>(&self) -> *mut _SummerRep<T> {
                        Summer::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Summer`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct SummerBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Summer>,
                }
                impl<'a> SummerBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestSummer>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _SummerRep<T> {
                        Summer::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Summer {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/types"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]summer"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_setter_new_cabi<T: GuestSetter>() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::new();
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_setter_set_cabi<T: GuestSetter>(
                    arg0: *mut u8,
                    arg1: f32,
                    arg2: f32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::set(
                        unsafe { SetterBorrow::lift(arg0 as u32 as usize) }.get(),
                        Pos2 { x: arg1, y: arg2 },
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_setter_get_cabi<T: GuestSetter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get(
                        unsafe { SetterBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let Pos2 { x: x2, y: y2 } = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(x2);
                    *ptr1.add(4).cast::<f32>() = _rt::as_f32(y2);
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_summer_new_cabi<T: GuestSummer>() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::new();
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_summer_set_val_cabi<T: GuestSummer>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    T::set_val(
                        unsafe { SummerBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_summer_set_key_cabi<T: GuestSummer>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::set_key(
                        unsafe { SummerBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_summer_sum_cabi<T: GuestSummer>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::sum(
                        unsafe { SummerBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    _rt::as_i32(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_summer_get_key_cabi<T: GuestSummer>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_key(
                        unsafe { SummerBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_summer_get_key<T: GuestSummer>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    type Setter: GuestSetter;
                    type Summer: GuestSummer;
                }
                pub trait GuestSetter: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/types"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]setter"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/types"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]setter"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new() -> Setter;
                    fn set(&self, p: Pos2) -> ();
                    fn get(&self) -> Pos2;
                }
                pub trait GuestSummer: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/types"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]summer"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/types"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]summer"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new() -> Summer;
                    fn set_val(&self, l: _rt::Vec<u32>) -> ();
                    fn set_key(&self, k: _rt::String) -> ();
                    fn sum(&self) -> u32;
                    fn get_key(&self) -> _rt::String;
                }
                #[doc(hidden)]
                macro_rules! __export_component_wasm_plugin_hello_types_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:wasm-plugin-hello/types#[static]setter.new")] unsafe
                        extern "C" fn export_static_setter_new() -> i32 { unsafe {
                        $($path_to_types)*:: _export_static_setter_new_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Setter > () } } #[unsafe
                        (export_name =
                        "component:wasm-plugin-hello/types#[method]setter.set")] unsafe
                        extern "C" fn export_method_setter_set(arg0 : * mut u8, arg1 :
                        f32, arg2 : f32,) { unsafe { $($path_to_types)*::
                        _export_method_setter_set_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Setter > (arg0, arg1, arg2) } } #[unsafe (export_name =
                        "component:wasm-plugin-hello/types#[method]setter.get")] unsafe
                        extern "C" fn export_method_setter_get(arg0 : * mut u8,) -> * mut
                        u8 { unsafe { $($path_to_types)*::
                        _export_method_setter_get_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Setter > (arg0) } } #[unsafe (export_name =
                        "component:wasm-plugin-hello/types#[static]summer.new")] unsafe
                        extern "C" fn export_static_summer_new() -> i32 { unsafe {
                        $($path_to_types)*:: _export_static_summer_new_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Summer > () } } #[unsafe
                        (export_name =
                        "component:wasm-plugin-hello/types#[method]summer.set-val")]
                        unsafe extern "C" fn export_method_summer_set_val(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize,) { unsafe {
                        $($path_to_types)*:: _export_method_summer_set_val_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Summer > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "component:wasm-plugin-hello/types#[method]summer.set-key")]
                        unsafe extern "C" fn export_method_summer_set_key(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize,) { unsafe {
                        $($path_to_types)*:: _export_method_summer_set_key_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Summer > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "component:wasm-plugin-hello/types#[method]summer.sum")] unsafe
                        extern "C" fn export_method_summer_sum(arg0 : * mut u8,) -> i32 {
                        unsafe { $($path_to_types)*::
                        _export_method_summer_sum_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Summer > (arg0) } } #[unsafe (export_name =
                        "component:wasm-plugin-hello/types#[method]summer.get-key")]
                        unsafe extern "C" fn export_method_summer_get_key(arg0 : * mut
                        u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_summer_get_key_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Summer > (arg0) } } #[unsafe (export_name =
                        "cabi_post_component:wasm-plugin-hello/types#[method]summer.get-key")]
                        unsafe extern "C" fn _post_return_method_summer_get_key(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_summer_get_key::<<$ty as
                        $($path_to_types)*:: Guest >::Summer > (arg0) } } const _ : () =
                        { #[doc(hidden)] #[unsafe (export_name =
                        "component:wasm-plugin-hello/types#[dtor]setter")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Setter::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Setter > (rep) } } }; const _ : ()
                        = { #[doc(hidden)] #[unsafe (export_name =
                        "component:wasm-plugin-hello/types#[dtor]summer")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Summer::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Summer > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_wasm_plugin_hello_types_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod filter {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Fir {
                    handle: _rt::Resource<Fir>,
                }
                type _FirRep<T> = Option<T>;
                impl Fir {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Fir`.
                    pub fn new<T: GuestFir>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FirRep<T> = Some(val);
                        let ptr: *mut _FirRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFir>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFir>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFir>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe { _rt::Box::from_raw(handle as *mut _FirRep<T>) };
                    }
                    fn as_ptr<T: GuestFir>(&self) -> *mut _FirRep<T> {
                        Fir::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Fir`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FirBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Fir>,
                }
                impl<'a> FirBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFir>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _FirRep<T> {
                        Fir::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Fir {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/filter"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]fir"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_fir_new_cabi<T: GuestFir>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let result1 = T::new(
                        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
                    );
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_fir_new_moving_cabi<T: GuestFir>(
                    arg0: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::new_moving(arg0 as u32);
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_fir_filter_cabi<T: GuestFir>(
                    arg0: *mut u8,
                    arg1: f32,
                ) -> f32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::filter(
                        unsafe { FirBorrow::lift(arg0 as u32 as usize) }.get(),
                        arg1,
                    );
                    _rt::as_f32(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_fir_filter_vec_cabi<T: GuestFir>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::filter_vec(
                        unsafe { FirBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = (result1).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_fir_filter_vec<T: GuestFir>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 4, 4);
                }
                pub trait Guest {
                    type Fir: GuestFir;
                }
                pub trait GuestFir: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/filter"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]fir"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wasm-plugin-hello/filter"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]fir"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(tap: _rt::Vec<f32>) -> Fir;
                    fn new_moving(n: u32) -> Fir;
                    fn filter(&self, input: f32) -> f32;
                    fn filter_vec(&self, input: _rt::Vec<f32>) -> _rt::Vec<f32>;
                }
                #[doc(hidden)]
                macro_rules! __export_component_wasm_plugin_hello_filter_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:wasm-plugin-hello/filter#[static]fir.new")] unsafe
                        extern "C" fn export_static_fir_new(arg0 : * mut u8, arg1 :
                        usize,) -> i32 { unsafe { $($path_to_types)*::
                        _export_static_fir_new_cabi::<<$ty as $($path_to_types)*:: Guest
                        >::Fir > (arg0, arg1) } } #[unsafe (export_name =
                        "component:wasm-plugin-hello/filter#[static]fir.new-moving")]
                        unsafe extern "C" fn export_static_fir_new_moving(arg0 : i32,) ->
                        i32 { unsafe { $($path_to_types)*::
                        _export_static_fir_new_moving_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Fir > (arg0) } } #[unsafe (export_name =
                        "component:wasm-plugin-hello/filter#[method]fir.filter")] unsafe
                        extern "C" fn export_method_fir_filter(arg0 : * mut u8, arg1 :
                        f32,) -> f32 { unsafe { $($path_to_types)*::
                        _export_method_fir_filter_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Fir > (arg0, arg1) } } #[unsafe (export_name =
                        "component:wasm-plugin-hello/filter#[method]fir.filter-vec")]
                        unsafe extern "C" fn export_method_fir_filter_vec(arg0 : * mut
                        u8, arg1 : * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_fir_filter_vec_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Fir > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "cabi_post_component:wasm-plugin-hello/filter#[method]fir.filter-vec")]
                        unsafe extern "C" fn _post_return_method_fir_filter_vec(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_fir_filter_vec::<<$ty as
                        $($path_to_types)*:: Guest >::Fir > (arg0) } } const _ : () = {
                        #[doc(hidden)] #[unsafe (export_name =
                        "component:wasm-plugin-hello/filter#[dtor]fir")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Fir::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Fir > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_wasm_plugin_hello_filter_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::string::String;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::vec::Vec;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_example_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_example_cabi!($ty with_types_in
        $($path_to_types_root)*); $($path_to_types_root)*::
        exports::component::wasm_plugin_hello::types::__export_component_wasm_plugin_hello_types_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::component::wasm_plugin_hello::types); $($path_to_types_root)*::
        exports::component::wasm_plugin_hello::filter::__export_component_wasm_plugin_hello_filter_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::component::wasm_plugin_hello::filter);
    };
}
#[doc(inline)]
pub(crate) use __export_example_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:component:wasm-plugin-hello:example:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 868] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe6\x05\x01A\x02\x01\
A\x0f\x01@\0\0s\x04\0\x0bhello-world\x01\0\x01@\x02\x01ay\x01by\0y\x04\0\x03add\x01\
\x01\x01py\x01@\x01\x01l\x02\0y\x04\0\x03sum\x01\x03\x01@\x01\x01ny\0y\x04\0\x08\
loop-sum\x01\x04\x01@\x01\x01ny\0s\x04\0\x0fgenerate-string\x01\x05\x01B\x19\x01\
r\x02\x01xv\x01yv\x04\0\x04pos2\x03\0\0\x04\0\x06setter\x03\x01\x04\0\x06summer\x03\
\x01\x01i\x02\x01@\0\0\x04\x04\0\x12[static]setter.new\x01\x05\x01h\x02\x01@\x02\
\x04self\x06\x01p\x01\x01\0\x04\0\x12[method]setter.set\x01\x07\x01@\x01\x04self\
\x06\0\x01\x04\0\x12[method]setter.get\x01\x08\x01i\x03\x01@\0\0\x09\x04\0\x12[s\
tatic]summer.new\x01\x0a\x01h\x03\x01py\x01@\x02\x04self\x0b\x01l\x0c\x01\0\x04\0\
\x16[method]summer.set-val\x01\x0d\x01@\x02\x04self\x0b\x01ks\x01\0\x04\0\x16[me\
thod]summer.set-key\x01\x0e\x01@\x01\x04self\x0b\0y\x04\0\x12[method]summer.sum\x01\
\x0f\x01@\x01\x04self\x0b\0s\x04\0\x16[method]summer.get-key\x01\x10\x04\0!compo\
nent:wasm-plugin-hello/types\x05\x06\x01B\x0c\x04\0\x03fir\x03\x01\x01pv\x01i\0\x01\
@\x01\x03tap\x01\0\x02\x04\0\x0f[static]fir.new\x01\x03\x01@\x01\x01ny\0\x02\x04\
\0\x16[static]fir.new-moving\x01\x04\x01h\0\x01@\x02\x04self\x05\x05inputv\0v\x04\
\0\x12[method]fir.filter\x01\x06\x01@\x02\x04self\x05\x05input\x01\0\x01\x04\0\x16\
[method]fir.filter-vec\x01\x07\x04\0\"component:wasm-plugin-hello/filter\x05\x07\
\x04\0#component:wasm-plugin-hello/example\x04\0\x0b\x0d\x01\0\x07example\x03\0\0\
\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bind\
gen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
