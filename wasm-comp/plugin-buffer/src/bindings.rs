// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_plugin_name_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::plugin_name();
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_plugin_name<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0
        .add(::core::mem::size_of::<*const u8>())
        .cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
    /// プラグインの識別名
    fn plugin_name() -> _rt::String;
}
#[doc(hidden)]
macro_rules! __export_world_dsp_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "plugin-name")] unsafe extern "C" fn
        export_plugin_name() -> * mut u8 { unsafe { $($path_to_types)*::
        _export_plugin_name_cabi::<$ty > () } } #[unsafe (export_name =
        "cabi_post_plugin-name")] unsafe extern "C" fn _post_return_plugin_name(arg0 : *
        mut u8,) { unsafe { $($path_to_types)*:: __post_return_plugin_name::<$ty > (arg0)
        } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_dsp_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 2 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea =
    _RetArea([::core::mem::MaybeUninit::uninit(); 2 * ::core::mem::size_of::<*const u8>()]);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod local {
        pub mod dsp {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Duration = u64;
                /// 時間の長さを表す型
                pub type Value = i16;
                /// 信号の値を表す型
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Single {
                    pub data: Value,
                    /// 1chの信号データ
                    pub elapsed: Duration,
                }
                impl ::core::fmt::Debug for Single {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Single")
                            .field("data", &self.data)
                            .field("elapsed", &self.elapsed)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Parameter {
                    pub name: _rt::String,
                    /// パラメータの名前
                    pub value: _rt::String,
                }
                impl ::core::fmt::Debug for Parameter {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Parameter")
                            .field("name", &self.name)
                            .field("value", &self.value)
                            .finish()
                    }
                }
                #[doc(hidden)]
                macro_rules! __export_local_dsp_types_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_local_dsp_types_0_1_0_cabi;
            }
            /// 1chの信号データを処理するインターフェース
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod single_channel {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Single = super::super::super::super::exports::local::dsp::types::Single;
                pub type Value = super::super::super::super::exports::local::dsp::types::Value;
                pub type Parameter = super::super::super::super::exports::local::dsp::types::Parameter;
                pub type Error = _rt::String;
                /// エラーを表す型
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Processor {
                    handle: _rt::Resource<Processor>,
                }
                type _ProcessorRep<T> = Option<T>;
                impl Processor {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Processor`.
                    pub fn new<T: GuestProcessor>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ProcessorRep<T> = Some(val);
                        let ptr: *mut _ProcessorRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestProcessor>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestProcessor>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestProcessor>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _ProcessorRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestProcessor>(&self) -> *mut _ProcessorRep<T> {
                        Processor::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Processor`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ProcessorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Processor>,
                }
                impl<'a> ProcessorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestProcessor>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ProcessorRep<T> {
                        Processor::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Processor {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]local:dsp/single-channel@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]processor"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_processor_cabi<T: GuestProcessor>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base6 = arg0;
                    let len6 = arg1;
                    let mut result6 = _rt::Vec::with_capacity(len6);
                    for i in 0..len6 {
                        let base = base6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e6 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len5 = l4;
                            let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                            super::super::super::super::exports::local::dsp::types::Parameter {
                                name: _rt::string_lift(bytes2),
                                value: _rt::string_lift(bytes5),
                            }
                        };
                        result6.push(e6);
                    }
                    _rt::cabi_dealloc(
                        base6,
                        len6 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result7 = Processor::new(T::new(result6));
                    (result7).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_processor_parameters_cabi<
                    T: GuestProcessor,
                >() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::parameters();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec5 = result0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::super::exports::local::dsp::types::Parameter {
                                name: name2,
                                value: value2,
                            } = e;
                            let vec3 = (name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (value2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
                    *ptr1.add(0).cast::<*mut u8>() = result5;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_static_processor_parameters<
                    T: GuestProcessor,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base6 = l0;
                    let len6 = l1;
                    for i in 0..len6 {
                        let base = base6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base6,
                        len6 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_processor_process_cabi<T: GuestProcessor>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: i64,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::process(
                        unsafe { ProcessorBorrow::lift(arg0 as u32 as usize) }.get(),
                        super::super::super::super::exports::local::dsp::types::Single {
                            data: arg1 as i16,
                            elapsed: arg2 as u64,
                        },
                    );
                    _rt::as_i32(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_processor_get_cabi<T: GuestProcessor>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::get(
                        unsafe { ProcessorBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::exports::local::dsp::types::Parameter {
                                name: name3,
                                value: value3,
                            } = e;
                            let vec4 = (name3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = (value3.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr2
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr2
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_processor_get<T: GuestProcessor>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_processor_set_cabi<T: GuestProcessor>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::set(
                        unsafe { ProcessorBorrow::lift(arg0 as u32 as usize) }.get(),
                        super::super::super::super::exports::local::dsp::types::Parameter {
                            name: _rt::string_lift(bytes0),
                            value: _rt::string_lift(bytes1),
                        },
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::exports::local::dsp::types::Parameter {
                                name: name4,
                                value: value4,
                            } = e;
                            let vec5 = (name4.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                            let vec6 = (value4.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_processor_set<T: GuestProcessor>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    type Processor: GuestProcessor;
                }
                pub trait GuestProcessor: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]local:dsp/single-channel@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]processor"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]local:dsp/single-channel@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]processor"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(init: _rt::Vec<Parameter>) -> Self;
                    /// 設定可能なパラメータリスト
                    fn parameters() -> _rt::Vec<Parameter>;
                    /// 処理
                    fn process(&self, input: Single) -> Value;
                    /// 現在地の取得
                    fn get(&self, name: _rt::String) -> Result<Parameter, Error>;
                    /// パラメータの設定
                    fn set(&self, param: Parameter) -> Result<Parameter, Error>;
                }
                #[doc(hidden)]
                macro_rules! __export_local_dsp_single_channel_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "local:dsp/single-channel@0.1.0#[constructor]processor")] unsafe
                        extern "C" fn export_constructor_processor(arg0 : * mut u8, arg1
                        : usize,) -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_processor_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Processor > (arg0, arg1) } } #[unsafe (export_name =
                        "local:dsp/single-channel@0.1.0#[static]processor.parameters")]
                        unsafe extern "C" fn export_static_processor_parameters() -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_static_processor_parameters_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Processor > () } } #[unsafe
                        (export_name =
                        "cabi_post_local:dsp/single-channel@0.1.0#[static]processor.parameters")]
                        unsafe extern "C" fn
                        _post_return_static_processor_parameters(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_static_processor_parameters::<<$ty as
                        $($path_to_types)*:: Guest >::Processor > (arg0) } } #[unsafe
                        (export_name =
                        "local:dsp/single-channel@0.1.0#[method]processor.process")]
                        unsafe extern "C" fn export_method_processor_process(arg0 : * mut
                        u8, arg1 : i32, arg2 : i64,) -> i32 { unsafe {
                        $($path_to_types)*:: _export_method_processor_process_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::Processor > (arg0, arg1, arg2) }
                        } #[unsafe (export_name =
                        "local:dsp/single-channel@0.1.0#[method]processor.get")] unsafe
                        extern "C" fn export_method_processor_get(arg0 : * mut u8, arg1 :
                        * mut u8, arg2 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_method_processor_get_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Processor > (arg0, arg1, arg2) } }
                        #[unsafe (export_name =
                        "cabi_post_local:dsp/single-channel@0.1.0#[method]processor.get")]
                        unsafe extern "C" fn _post_return_method_processor_get(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_processor_get::<<$ty as $($path_to_types)*::
                        Guest >::Processor > (arg0) } } #[unsafe (export_name =
                        "local:dsp/single-channel@0.1.0#[method]processor.set")] unsafe
                        extern "C" fn export_method_processor_set(arg0 : * mut u8, arg1 :
                        * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> * mut
                        u8 { unsafe { $($path_to_types)*::
                        _export_method_processor_set_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Processor > (arg0, arg1, arg2, arg3, arg4) } } #[unsafe
                        (export_name =
                        "cabi_post_local:dsp/single-channel@0.1.0#[method]processor.set")]
                        unsafe extern "C" fn _post_return_method_processor_set(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_processor_set::<<$ty as $($path_to_types)*::
                        Guest >::Processor > (arg0) } } const _ : () = { #[doc(hidden)]
                        #[unsafe (export_name =
                        "local:dsp/single-channel@0.1.0#[dtor]processor")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Processor::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Processor > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_local_dsp_single_channel_0_1_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 5 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 5
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::string::String;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_dsp_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_dsp_cabi!($ty with_types_in
        $($path_to_types_root)*); $($path_to_types_root)*::
        exports::local::dsp::types::__export_local_dsp_types_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::local::dsp::types);
        $($path_to_types_root)*::
        exports::local::dsp::single_channel::__export_local_dsp_single_channel_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::local::dsp::single_channel);
    };
}
#[doc(inline)]
pub(crate) use __export_dsp_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:local:dsp@0.1.0:dsp:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 671] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa5\x04\x01A\x02\x01\
A\x09\x01@\0\0s\x04\0\x0bplugin-name\x01\0\x01B\x08\x01w\x04\0\x08duration\x03\0\
\0\x01|\x04\0\x05value\x03\0\x02\x01r\x02\x04data\x03\x07elapsed\x01\x04\0\x06si\
ngle\x03\0\x04\x01r\x02\x04names\x05values\x04\0\x09parameter\x03\0\x06\x04\0\x15\
local:dsp/types@0.1.0\x05\x01\x02\x03\0\0\x06single\x02\x03\0\0\x05value\x02\x03\
\0\0\x09parameter\x01B\x17\x02\x03\x02\x01\x02\x04\0\x06single\x03\0\0\x02\x03\x02\
\x01\x03\x04\0\x05value\x03\0\x02\x02\x03\x02\x01\x04\x04\0\x09parameter\x03\0\x04\
\x01s\x04\0\x05error\x03\0\x06\x04\0\x09processor\x03\x01\x01p\x05\x01i\x08\x01@\
\x01\x04init\x09\0\x0a\x04\0\x16[constructor]processor\x01\x0b\x01@\0\0\x09\x04\0\
\x1c[static]processor.parameters\x01\x0c\x01h\x08\x01@\x02\x04self\x0d\x05input\x01\
\0\x03\x04\0\x19[method]processor.process\x01\x0e\x01j\x01\x05\x01\x07\x01@\x02\x04\
self\x0d\x04names\0\x0f\x04\0\x15[method]processor.get\x01\x10\x01@\x02\x04self\x0d\
\x05param\x05\0\x0f\x04\0\x15[method]processor.set\x01\x11\x04\0\x1elocal:dsp/si\
ngle-channel@0.1.0\x05\x05\x04\0\x13local:dsp/dsp@0.1.0\x04\0\x0b\x09\x01\0\x03d\
sp\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10\
wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
